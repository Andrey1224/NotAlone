#!/usr/bin/env python3
"""
Script to check user topics in the database.
"""

import asyncio
import os
import sys

from sqlalchemy import select

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.db import AsyncSessionLocal
from models.topic import Topic, UserTopic
from models.user import User


async def check_user_topics(nickname: str):
    """Check topics for a specific user by nickname."""

    async with AsyncSessionLocal() as db:
        try:
            # Find user by nickname
            result = await db.execute(select(User).where(User.nickname == nickname))
            user = result.scalar_one_or_none()

            if not user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.nickname} (ID: {user.id}, TG ID: {user.tg_id})")
            print(f"   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.tz}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {user.bio_short or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"   –°–æ–∑–¥–∞–Ω: {user.created_at}")
            print()

            # Get user topics
            topics_result = await db.execute(
                select(Topic, UserTopic.weight)
                .join(UserTopic)
                .where(UserTopic.user_id == user.id)
                .order_by(Topic.title)
            )
            topics = topics_result.all()

            if not topics:
                print("üìù –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º")
            else:
                print(f"üìù –¢–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({len(topics)}):")
                for topic, weight in topics:
                    print(f"   ‚Ä¢ {topic.title} (slug: {topic.slug}, –≤–µ—Å: {weight})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


async def list_all_users():
    """List all users in the database."""

    async with AsyncSessionLocal() as db:
        try:
            result = await db.execute(select(User).order_by(User.created_at))
            users = result.scalars().all()

            if not users:
                print("üë• –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            print(f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(users)}):")
            for user in users:
                # Get topic count for each user
                topics_count_result = await db.execute(select(UserTopic).where(UserTopic.user_id == user.id))
                topics_count = len(topics_count_result.scalars().all())

                print(f"   ‚Ä¢ {user.nickname} (ID: {user.id}, TG ID: {user.tg_id}, —Ç–µ–º: {topics_count})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def list_all_topics():
    """List all available topics."""

    async with AsyncSessionLocal() as db:
        try:
            result = await db.execute(select(Topic).order_by(Topic.title))
            topics = result.scalars().all()

            if not topics:
                print("üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ–º")
                return

            print(f"üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã ({len(topics)}):")
            for topic in topics:
                print(f"   ‚Ä¢ {topic.title} (slug: {topic.slug})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}")


async def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  {sys.argv[0]} <nickname>     - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print(f"  {sys.argv[0]} --users        - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"  {sys.argv[0]} --topics       - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã")
        return

    command = sys.argv[1]

    if command == "--users":
        await list_all_users()
    elif command == "--topics":
        await list_all_topics()
    else:
        nickname = command
        await check_user_topics(nickname)


if __name__ == "__main__":
    # Load environment variables
    from dotenv import load_dotenv

    load_dotenv()

    asyncio.run(main())
