"""Inline keyboard builders."""

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def get_topics_keyboard() -> InlineKeyboardMarkup:
    """Build inline keyboard for topic selection."""
    # TODO: Load topics from database
    topics = [
        ("üíî –†–∞–∑–≤–æ–¥", "topic_divorce"),
        ("üî• –í—ã–≥–æ—Ä–∞–Ω–∏–µ", "topic_burnout"),
        ("üè† –ü–µ—Ä–µ–µ–∑–¥", "topic_relocation"),
        ("üíº –°–º–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã", "topic_job_change"),
        ("üò¢ –£—Ç—Ä–∞—Ç–∞", "topic_loss"),
        ("üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "topic_growth"),
    ]

    buttons = [[InlineKeyboardButton(text=text, callback_data=callback)] for text, callback in topics]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_match_confirmation_keyboard(match_id: int) -> InlineKeyboardMarkup:
    """Build keyboard for match confirmation."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"match_accept_{match_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"match_decline_{match_id}"),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_tip_amount_keyboard(match_id: int) -> InlineKeyboardMarkup:
    """Build keyboard for tip amount selection."""
    amounts = [50, 100, 200, 500]
    buttons = [
        [InlineKeyboardButton(text=f"‚≠ê {amount}", callback_data=f"tip_{match_id}_{amount}")] for amount in amounts
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
