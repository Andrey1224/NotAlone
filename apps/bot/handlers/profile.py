"""Profile management handlers."""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from apps.bot.keyboards.inline import get_timezones_keyboard, get_topics_keyboard
from apps.bot.states.profile import ProfileForm
from models import Topic, User, UserTopic

router = Router()


@router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext, db: AsyncSession) -> None:
    """Handle /profile command - start or edit profile."""
    # Check if user exists
    result = await db.execute(select(User).where(User.tg_id == message.from_user.id))
    user = result.scalar_one_or_none()

    if user:
        # User exists, show profile
        await show_profile(message, user, db)
    else:
        # Start profile creation
        await state.set_state(ProfileForm.nickname)
        await message.answer(
            "üë§ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\n" "–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º (–∫–∞–∫ –≤–∞—Å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏):"
        )


async def show_profile(message: Message, user: User, db: AsyncSession) -> None:
    """Display user profile."""
    # Load user topics
    result = await db.execute(select(Topic).join(UserTopic).where(UserTopic.user_id == user.id))
    topics = result.scalars().all()
    topics_text = ", ".join(t.title for t in topics) if topics else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    profile_text = f"""
üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üë§ –ü—Å–µ–≤–¥–æ–Ω–∏–º: {user.nickname}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.tz}
üí¨ –¢–µ–º—ã: {topics_text}
üìù –û —Å–µ–±–µ: {user.bio_short or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/edit_nickname - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º
/edit_topics - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã
/edit_bio - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    """.strip()

    await message.answer(profile_text)


@router.message(ProfileForm.nickname)
async def process_nickname(message: Message, state: FSMContext) -> None:
    """Process nickname input."""
    nickname = message.text.strip()

    if len(nickname) < 2 or len(nickname) > 64:
        await message.answer("–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(nickname=nickname)
    await state.set_state(ProfileForm.timezone)

    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {nickname}!\n\n" "üåç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_timezones_keyboard()
    )


@router.callback_query(F.data.startswith("tz_"), ProfileForm.timezone)
async def process_timezone(callback: CallbackQuery, state: FSMContext, db: AsyncSession) -> None:
    """Process timezone selection."""
    timezone = callback.data.split("_", 1)[1]
    await state.update_data(tz=timezone)
    await state.set_state(ProfileForm.topics)

    await callback.message.edit_text(
        f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç (–º–∏–Ω–∏–º—É–º 2):\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.",
        reply_markup=get_topics_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("topic_"), ProfileForm.topics)
async def process_topic_selection(callback: CallbackQuery, state: FSMContext, db: AsyncSession) -> None:
    """Process topic selection (toggle)."""
    topic_slug = callback.data.split("_", 1)[1]

    # Get current selected topics
    data = await state.get_data()
    selected_topics = data.get("selected_topics", set())

    # Toggle topic
    if topic_slug in selected_topics:
        selected_topics.remove(topic_slug)
    else:
        selected_topics.add(topic_slug)

    await state.update_data(selected_topics=selected_topics)

    # Update keyboard
    await callback.message.edit_reply_markup(reply_markup=get_topics_keyboard(selected_topics))
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected_topics)}")


@router.callback_query(F.data == "topics_done", ProfileForm.topics)
async def process_topics_done(callback: CallbackQuery, state: FSMContext) -> None:
    """Finish topic selection."""
    data = await state.get_data()
    selected_topics = data.get("selected_topics", set())

    if len(selected_topics) < 2:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ç–µ–º—ã", show_alert=True)
        return

    await state.set_state(ProfileForm.bio)
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected_topics)}\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )
    await callback.answer()


@router.message(ProfileForm.bio, Command("skip"))
async def skip_bio(message: Message, state: FSMContext) -> None:
    """Skip bio step."""
    await state.update_data(bio_short=None)
    await state.set_state(ProfileForm.safety_confirmation)
    await send_safety_confirmation(message)


@router.message(ProfileForm.bio)
async def process_bio(message: Message, state: FSMContext) -> None:
    """Process bio input."""
    bio = message.text.strip()

    if len(bio) > 160:
        await message.answer(
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(bio)} —Å–∏–º–≤–æ–ª–æ–≤). " "–ú–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:"
        )
        return

    await state.update_data(bio_short=bio)
    await state.set_state(ProfileForm.safety_confirmation)
    await send_safety_confirmation(message)


async def send_safety_confirmation(message: Message) -> None:
    """Send safety rules for confirmation."""
    safety_text = """
‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:

1. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã
2. –ù–µ –¥–∞–≤–∞–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
3. –£–≤–∞–∂–∞–π—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
4. –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
5. –ù–µ –æ–±–µ—â–∞–π—Ç–µ "–≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å"

üÜò –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122
‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 051 (–ú–æ—Å–∫–≤–∞)

‚ö†Ô∏è –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ù–ï –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏–ª–∏ –≤—Ä–∞—á–∞!

–ù–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–Ω–∏–º–∞—é", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    """.strip()

    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–Ω–∏–º–∞—é", callback_data="safety_accept")]]
    )

    await message.answer(safety_text, reply_markup=keyboard)


@router.callback_query(F.data == "safety_accept", ProfileForm.safety_confirmation)
async def process_safety_confirmation(callback: CallbackQuery, state: FSMContext, db: AsyncSession) -> None:
    """Save profile after safety confirmation."""
    data = await state.get_data()

    # Create user
    user = User(
        tg_id=callback.from_user.id,
        nickname=data["nickname"],
        tz=data["tz"],
        bio_short=data.get("bio_short"),
        safety_ack=True,
    )
    db.add(user)
    await db.flush()

    # Load topics from DB
    selected_topics = data.get("selected_topics", set())
    result = await db.execute(select(Topic).where(Topic.slug.in_(selected_topics)))
    topics = result.scalars().all()

    # Create user-topic relationships
    for topic in topics:
        user_topic = UserTopic(user_id=user.id, topic_id=topic.id, weight=1)
        db.add(user_topic)

    await db.commit()

    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, {user.nickname}!\n\n" "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /find"
    )
    await callback.answer()
    await state.clear()
