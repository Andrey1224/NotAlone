"""End chat session handler."""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from apps.bot.api_client import api_client

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("end"))  # type: ignore[misc]
async def cmd_end(message: Message) -> None:
    """
    Handle /end command - end active chat session.

    Shows confirmation button before actually ending.
    """
    if not message.from_user:
        return

    # Create confirmation keyboard
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_confirm:{message.from_user.id}"
                ),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="end_cancel"),
            ]
        ]
    )

    await message.answer(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥?\n\n–≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.",
        reply_markup=keyboard,
    )


@router.callback_query(F.data.startswith("end_confirm:"))  # type: ignore[misc]
async def handle_end_confirm(callback: CallbackQuery) -> None:
    """Handle end confirmation callback."""
    if not callback.from_user or not callback.message:
        return

    # Parse user_id from callback data
    try:
        _, user_id_str = callback.data.split(":")  # type: ignore[union-attr]
        user_id = int(user_id_str)

        # Security: ensure user can only end their own chats
        if callback.from_user.id != user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
            return

        # Call API to end chat
        response = await api_client.post("/chat/end", json={"user_id": user_id})

        peer_tg_id = response.get("peer_tg_id")

        # Notify initiator
        await callback.message.edit_text(
            "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!\n\n"
            "üíö –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /find\n"
            "üí∏ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tips"
        )

        # Notify peer
        if peer_tg_id:
            # Lazy import to avoid circular dependency
            from apps.bot.bot import bot

            await bot.send_message(
                chat_id=peer_tg_id,
                text="üìû –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º.\n\n"
                "üíö –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /find\n"
                "üí∏ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tips",
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to end chat: {e}")
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞", show_alert=True)


@router.callback_query(F.data == "end_cancel")  # type: ignore[misc]
async def handle_end_cancel(callback: CallbackQuery) -> None:
    """Handle end cancellation callback."""
    if not callback.message:
        return

    await callback.message.edit_text("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ. –î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    await callback.answer()
